/*******************************************************************************

  I_Connection

  Интерфейс обмена данными через устройства ввода/вывода.


  ОПИСАНИЕ

  * Интерфейс обеспечивает набор общих методов для реализации обмена данными между устройствами ввода/вывода.

  * Предназначен для создания наследуемых реализаций объектов программного интерфейса, обеспечивающих обмен данными
    между процессами.

*************************************************************************************/

#pragma once

#include <sys/socket.h>
#include <sys/ioctl.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <ev++.h>

#include <vector>
#include <string>

#include "C_Log.h"

namespace iface {

class I_Connection
{

public:

    /*****************************************************************************
     * Настройка объекта
     *
     * @param
     *  [in] a_params - конфигурация аресат/параметр для настройки объекта.
     */
    virtual bool setup(std::string &a_addr, uint16_t a_port) = 0;

    /*****************************************************************************
     * Открытие объекта
     *
     * Открывает объект для приема и передачи данных
     */
    virtual bool open() = 0;

    /*****************************************************************************
     * Установка в режим прослушивания
     *
     */
    virtual bool listen() = 0;

    /*****************************************************************************
     * Прием данных
     *
     * @param
     *  [in]  a_data - принятые данные (при !a_data.empty())
     *  [in]  a_connSock - дескриптор сокета текущего соединения
     *
     * @return
     *  true    - отправка успешна
     *  false   - данные не отправлены
     *      0       - некритическая ошибка, попробовать позже
     *     -1       - критическая ошибка, дальшнейшая работа невозможна
     */
    virtual bool recv( std::vector<char> &a_data, int a_connSock = 0 ) = 0;

    /*****************************************************************************
     * Отправка данных
     *
     * @param
     *  [in] a_data - отправляемые данные
     *  [in] a_connSock - дескриптор сокета текущего соединения
     * @return
     *  true    - отправка успешна
     *  false   - данные не отправлены
     *      0       - некритическая ошибка, попробовать позже
     *     -1       - критическая ошибка, дальшнейшая работа невозможна
     */
    virtual bool send( const std::vector<char> &a_data, int a_connSock = 0 ) = 0;

    /*****************************************************************************
     * Разрыв соединения
     */
    virtual bool disconnect(int a_sd = 0) = 0;

    /*****************************************************************************
     * Закрытие объекта
     */
    virtual bool close() = 0;

    /*****************************************************************************
     * Сброс настроек
     */
    virtual bool flush() = 0;

public:

    I_Connection()          = default;
    virtual ~I_Connection() = default;

    I_Connection( const I_Connection& )                = delete;
    I_Connection(       I_Connection&& )               = default;
    I_Connection & operator = ( const I_Connection& )  = delete;
    I_Connection & operator = (       I_Connection&& ) = default;
};

} // namespace iface
